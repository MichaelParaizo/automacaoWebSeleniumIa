# ============================================
# app.py (AJUSTADO: NOVA URL DE TESTE)
# Interface Streamlit para o Mentor de Automa√ß√£o Web com IA
# ============================================

import streamlit as st
import json

# Importar as fun√ß√µes necess√°rias
from ai_interpreter import interpretar_comando
from automation_engine import executar_automacao 

# --- Configura√ß√£o da Interface ---
st.set_page_config(page_title="Automa√ß√£o Web Selenium com IA", layout="wide")

# T√≠tulo Principal (N√£o alterado)
st.title("Automa√ß√£o Web Selenium com IA ü§ñ")
# DESCRI√á√ÉO ALTERADA para o novo site
st.markdown("Descreva a tarefa de automa√ß√£o que voc√™ quer executar em linguagem natural (Site de Teste: `https://www.demoblaze.com/`).")

# --- Entrada do Usu√°rio ---
# R√≥tulo e Placeholder mantidos
comando_usuario = st.text_area(
    "Comando de Automa√ß√£o", 
    value="",
    placeholder="digite o comando aqui...",
    height=150
)

# --- Bot√£o de Execu√ß√£o ---
if st.button("Executar Automa√ß√£o Guiada por IA"):
    if not comando_usuario:
        st.warning("Por favor, digite um comando de automa√ß√£o.")
    else:
        st.info(f"Analisando comando: {comando_usuario}")
        
        st.markdown("---")
        st.subheader("Passo 1/2: Interpretando comando com IA (Gerando o Script JSON)")

        try:
            # 1. Chamar a IA para gerar o JSON de a√ß√µes
            json_acoes = interpretar_comando(comando_usuario)
            
            # Tenta carregar o JSON para exibi√ß√£o formatada
            acoes_carregadas = json.loads(json_acoes)
            
            # Exibe o JSON completo gerado pela IA
            st.code(json.dumps(acoes_carregadas, indent=2), language='json')
            
            if 'script_acoes' in acoes_carregadas and acoes_carregadas['script_acoes']:
                 st.success("‚úÖ Plano de A√ß√£o Completo gerado com sucesso!")
            elif acoes_carregadas.get("erro"):
                 st.error(f"‚ùå Erro na Gera√ß√£o do Plano de A√ß√£o: {acoes_carregadas.get('erro')}")
            else:
                 st.warning("‚ö†Ô∏è A IA gerou o JSON, mas ele est√° vazio ou incompleto.")

            st.markdown("---")
            
            # 2. Executar a automa√ß√£o (s√≥ se n√£o houver erro de IA)
            if 'script_acoes' in acoes_carregadas:
                st.subheader("Passo 2/2: Executando a√ß√µes no Selenium...")
                
                # Executa o motor de automa√ß√£o e recebe o log completo
                log_completo = executar_automacao(json_acoes) 
                
                # L√≥gica para verificar o erro no log
                if "‚ùå Erro" in log_completo or "Valida√ß√£o FALHOU" in log_completo:
                    st.error("‚ùå Automa√ß√£o Falhou! Verifique o Log de Execu√ß√£o abaixo.")
                else:
                    st.success("‚úÖ Automa√ß√£o de script conclu√≠da com sucesso!")
                    
                st.subheader("Log de Execu√ß√£o do Selenium:")
                # Exibe o log completo que cont√©m os detalhes da execu√ß√£o
                st.code(log_completo, language='text') 

        except json.JSONDecodeError:
             st.error("‚ùå Erro fatal: O retorno da IA n√£o √© um JSON v√°lido. Verifique a chave da API.")
             st.code(json_acoes)
        except Exception as e:
             st.error(f"‚ùå Erro Inesperado: {e}")