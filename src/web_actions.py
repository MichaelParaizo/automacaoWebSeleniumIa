# ============================================
# web_actions.py (AGORA INCLUI tirar_screenshot)
# Fun√ß√µes de baixo n√≠vel para intera√ß√£o com o Selenium
# ============================================

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait 
from selenium.webdriver.support import expected_conditions as ec 
import os
import time

# --- Vari√°vel Global para o Diret√≥rio de Evid√™ncias ---
# Cria um diret√≥rio de screenshots √∫nico por execu√ß√£o
EVIDENCE_DIR = os.path.join(os.getcwd(), 'evidencias', time.strftime("%Y%m%d_%H%M%S"))
os.makedirs(EVIDENCE_DIR, exist_ok=True)

# üü¢ NOVA FUN√á√ÉO ADICIONADA: tirar_screenshot
def tirar_screenshot(driver, nome_arquivo: str):
    """
    Captura uma screenshot e salva no diret√≥rio de evid√™ncias.
    """
    try:
        caminho_completo = os.path.join(EVIDENCE_DIR, f"{nome_arquivo}.png")
        driver.save_screenshot(caminho_completo)
        print(f"üì∏ Screenshot salva em: {caminho_completo}")
    except Exception as e:
        print(f"‚ùå Erro ao tirar screenshot: {e}")

# ... (MANTENHA TODAS AS OUTRAS FUN√á√ïES ABAIXO INALTERADAS) ...

def abrir_site(driver, url: str):
    """Abre um site na URL fornecida."""
    print(f"üåê Acessando: {url}")
    driver.get(url)

def preencher_campo(driver, seletor: tuple, texto: str):
    # ... (c√≥digo inalterado) ...
    """
    Preenche um campo de texto, usando Espera H√≠brida/Agressiva (SendKeys + JS Fallback).
    """
    seletor_tipo = seletor[0]
    seletor_valor = seletor[1]
    elemento = None
    
    try:
        wait = WebDriverWait(driver, 10)
        
        # 1. Espera que o elemento esteja PRESENTE
        elemento = wait.until(
            ec.presence_of_element_located(seletor)
        )
        
        # 2. Tenta preencher (A√ß√£o normal)
        elemento.clear()
        elemento.send_keys(texto)
        print(f"‚úçÔ∏è Campo ('{seletor_tipo}', '{seletor_valor}') preenchido com: {texto}")
        
    except Exception:
        # Se falhou, tenta preencher for√ßado via JavaScript
        if elemento:
            try:
                driver.execute_script(f"arguments[0].value='{texto}';", elemento)
                print(f"‚ö†Ô∏è Campo ('{seletor_tipo}', '{seletor_valor}') falhou. Preenchimento JS for√ßado com: {texto}")
            except:
                print(f"‚ö†Ô∏è Campo ('{seletor_tipo}', '{seletor_valor}') falhou no preenchimento JS.")
        else:
            print(f"‚ö†Ô∏è Campo ('{seletor_tipo}', '{seletor_valor}') n√£o encontrado.")

def clicar_elemento(driver, seletor: tuple):
    # ... (c√≥digo inalterado) ...
    """
    Clica em um elemento usando Espera H√≠brida/Agressiva (Normal Click + JS Fallback).
    """
    seletor_tipo = seletor[0]
    seletor_valor = seletor[1]
    elemento = None 

    try:
        wait = WebDriverWait(driver, 10) 
        
        # 1. Espera que o elemento esteja PRESENTE
        elemento = wait.until(ec.presence_of_element_located(seletor))
        
        # 2. Tenta o clique normal
        wait.until(ec.element_to_be_clickable(seletor))
        elemento.click()
        print(f"üñ±Ô∏è Clique realizado em: {seletor}")
        
    except Exception:
        # 3. Se o clique normal falhou, tenta o clique for√ßado via JavaScript
        if elemento:
            try:
                driver.execute_script("arguments[0].click();", elemento)
                print(f"‚ö†Ô∏è Elemento {seletor} falhou. Tentando JS... üñ±Ô∏è Clique JS realizado.")
            except:
                print(f"‚ö†Ô∏è Elemento ('{seletor_tipo}', '{seletor_valor}') falhou no clique JS.")
        else:
            print(f"‚ö†Ô∏è Elemento ('{seletor_tipo}', '{seletor_valor}') n√£o encontrado ap√≥s 10s.")


def validar_texto_esperado(driver, seletor: tuple, texto_esperado: str):
    # ... (c√≥digo inalterado) ...
    """Valida se um texto esperado est√° presente no elemento, usando Espera Expl√≠cita."""
    seletor_tipo = seletor[0]
    seletor_valor = seletor[1]
    
    try:
        wait = WebDriverWait(driver, 10)
        
        # Espera at√© que o elemento esteja VIS√çVEL e CAPTURA seu texto
        elemento = wait.until(
            ec.visibility_of_element_located(seletor)
        )
        
        texto_capturado = elemento.text.strip()
        print(f"üîç Texto capturado: {texto_capturado}")

        if texto_esperado in texto_capturado:
            print(f"‚úÖ Valida√ß√£o OK: '{texto_esperado}' encontrado.")
        else:
            print(f"‚ùå Valida√ß√£o FALHOU: '{texto_esperado}' n√£o encontrado.")
            
    except Exception:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel capturar texto de {seletor}.")
        print(f"‚ùå Valida√ß√£o FALHOU: '{texto_esperado}' n√£o encontrado.")

def esperar_por_alerta(driver, texto_esperado: str = "Product added"):
    # ... (c√≥digo inalterado) ...
    """
    Aguarda por um alerta do navegador (modal do DemoBlaze) e o aceita.
    """
    try:
        wait = WebDriverWait(driver, 10)
        wait.until(ec.alert_is_present())
        alert = driver.switch_to.alert
        
        # Captura e valida o texto
        texto_alerta = alert.text
        if texto_esperado in texto_alerta:
            print(f"‚úÖ Alerta capturado com sucesso: '{texto_alerta}'")
            alert.accept()
        else:
            print(f"‚ùå Alerta encontrado, mas texto esperado ('{texto_esperado}') n√£o corresponde. Texto: '{texto_alerta}'")
            alert.accept() # Aceita mesmo assim para continuar
            
    except Exception as e:
        print(f"‚ö†Ô∏è Alerta n√£o apareceu dentro do tempo limite. Erro: {e}")
        
def esperar_por_visibilidade(driver, seletor: tuple):
    # ... (c√≥digo inalterado) ...
    """
    Aguarda at√© que um elemento se torne vis√≠vel no DOM.
    √ötil para modais ou elementos que demoram a aparecer.
    """
    seletor_tipo = seletor[0]
    seletor_valor = seletor[1]

    try:
        wait = WebDriverWait(driver, 10)
        wait.until(
            ec.visibility_of_element_located(seletor)
        )
        print(f"‚åõ Espera conclu√≠da: Elemento {seletor} est√° vis√≠vel.")
    except Exception:
        print(f"‚ùå Espera FALHOU: Elemento {seletor} n√£o se tornou vis√≠vel em 10s.")
        
def esperar_por_invisibilidade(driver, seletor: tuple):
    # ... (c√≥digo inalterado) ...
    """
    Aguarda at√© que um elemento se torne INVIS√çVEL no DOM.
    √ötil para modais ou overlays que devem desaparecer.
    """
    seletor_tipo = seletor[0]
    seletor_valor = seletor[1]

    try:
        wait = WebDriverWait(driver, 10)
        # CR√çTICO: Espera a condi√ß√£o de INVISIBILIDADE
        wait.until(
            ec.invisibility_of_element_located(seletor)
        )
        print(f"‚åõ Espera conclu√≠da: Elemento {seletor} est√° INVIS√çVEL.")
    except Exception:
        print(f"‚ùå Espera FALHOU: Elemento {seletor} N√ÉO desapareceu em 10s.")